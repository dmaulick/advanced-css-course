/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* resets: */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  padding: 30px;
}

.header {
  background-image: linear-gradient(
    to right bottom, 
    rgb(126, 213, 111, 0.8), 
    rgb(40, 180, 133, 0.8)),
    url('../img/hero.jpg');
  height: 95vh;
  background-size: cover;
  background-position: top;
  /* clip-path property editor: https://bennettfeely.com/clippy/ */
  clip-path: polygon(0% 0%, 100% 0%, 100% 75%, 0% 100%);
}

.logo-box {
  position: relative;
  top: 20px;
  left: 20px;
}

.logo {
  height: 35px;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center; /* This aligns the button. Because it is a anchor tag */
}

.header-primary {
  color: white;
  text-transform: uppercase;
  backface-visibility: hidden; /* Little hack to avoid weird shakiness on transform animations. (According to udemy people don't know why this happens...) */
  margin-bottom: 50px;
}
 
.header-primary-main {
  display: block;
  font-size: 75px;
  font-weight: 400;
  letter-spacing: 25px;

  /* Animation properties */
  animation: moveInFromLeft 1s ease-out;
  /* ^shorthand for: */
  /* animation-name: moveInFromLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out; */

  /* Other unused but useful animation properties */
  /* animation-delay: 2s;
  animation-iteration-count: 3; */
}

.header-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 18.2px;

  animation: moveInFromRight 1s ease-out;
}


@keyframes moveInFromLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }

  80% {
    transform: translateX(10px);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInFromRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    transform: translateX(-10px);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Pseudo *classes* use : (one colon) */

.btn:link, 
.btn:visited {
  text-decoration: none;
  text-transform: uppercase;
  padding: 15px 40px;
  display: inline-block;
  border-radius: 100px;

  /* Confusing but transition must be declared on initial state. */
  /* By default css changes occur immeditately. Transitions allow us to define exactly how and which css properties should change.*/
  /* transition: <property> <duration> <timing-function> <delay>; */
  transition: all .2s;

  position: relative; /* to make children absolute position with respect to this */
}

.btn-white {
  background-color: white;
  color: #777;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0px 10px 20px rgb(0, 0, 0, 0.2);
}

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0px 5px 10px rgb(0, 0, 0, 0.2);
}

/* Pseudo *elements* use :: (two colons) */
.btn::after {
  /* pseudo element is child of element so this is just base style to match original */
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100px;

  position: absolute; /* According to udemy absolute will use closest parent with relative position as its reference. */
  top: 0;
  left: 0;
  z-index: -1;

  transition: all .4s; /* Again for transitions we declare on initial state. Even for pseudo elements. */
}

.btn-white::after {
  background-color: white;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn-animated {
  animation: moveInFromBottom .7s ease-in 1s;
  animation-fill-mode: backwards; /* Automatically uses initial state of animation (in this case so that button is hidden at start). */
}

@keyframes moveInFromBottom {
  0% {
    opacity: 0;
    transform: translateY(100px);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}